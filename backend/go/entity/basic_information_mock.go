// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package entity

import (
	"context"
	"sync"
)

// Ensure, that BasicInformationRepositoryMock does implement BasicInformationRepository.
// If this is not the case, regenerate this file with moq.
var _ BasicInformationRepository = &BasicInformationRepositoryMock{}

// BasicInformationRepositoryMock is a mock implementation of BasicInformationRepository.
//
//	func TestSomethingThatUsesBasicInformationRepository(t *testing.T) {
//
//		// make and configure a mocked BasicInformationRepository
//		mockedBasicInformationRepository := &BasicInformationRepositoryMock{
//			FindFunc: func(contextMoqParam context.Context) (BasicInformation, error) {
//				panic("mock out the Find method")
//			},
//		}
//
//		// use mockedBasicInformationRepository in code that requires BasicInformationRepository
//		// and then make assertions.
//
//	}
type BasicInformationRepositoryMock struct {
	// FindFunc mocks the Find method.
	FindFunc func(contextMoqParam context.Context) (BasicInformation, error)

	// calls tracks calls to the methods.
	calls struct {
		// Find holds details about calls to the Find method.
		Find []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
	}
	lockFind sync.RWMutex
}

// Find calls FindFunc.
func (mock *BasicInformationRepositoryMock) Find(contextMoqParam context.Context) (BasicInformation, error) {
	if mock.FindFunc == nil {
		panic("BasicInformationRepositoryMock.FindFunc: method is nil but BasicInformationRepository.Find was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockFind.Lock()
	mock.calls.Find = append(mock.calls.Find, callInfo)
	mock.lockFind.Unlock()
	return mock.FindFunc(contextMoqParam)
}

// FindCalls gets all the calls that were made to Find.
// Check the length with:
//
//	len(mockedBasicInformationRepository.FindCalls())
func (mock *BasicInformationRepositoryMock) FindCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockFind.RLock()
	calls = mock.calls.Find
	mock.lockFind.RUnlock()
	return calls
}
