// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/ogoshikazuki/skill-sheet/entity"
)

type BasicInformation struct {
	Birthday           entity.Date `json:"birthday"`
	Gender             Gender      `json:"gender"`
	AcademicBackground string      `json:"academicBackground"`
}

type Query struct {
}

type Gender string

const (
	GenderFemale Gender = "FEMALE"
	GenderMale   Gender = "MALE"
)

var AllGender = []Gender{
	GenderFemale,
	GenderMale,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderFemale, GenderMale:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Gender", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
